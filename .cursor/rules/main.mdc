---
description: 
globs: 
alwaysApply: true
---
# Flux RSS Fabric AI - Development Rules

## Core Development Principles

- Use functional programming paradigms whenever possible:
  - Write pure functions with minimal side effects
  - Use immutable data structures
  - Prefer function composition over imperative procedures
  - Use declarative code style
  - Leverage higher-order functions and transformations
  - Keep data and behavior separate
  - use `Effect` library the most possible.

- Never modify shadcn components without explicit approval

## Architecture Rules

### Frontend (SvelteKit)
- Components must be organized in `lib/components/` including:
  - UI (shadcn-svelte)
  - Feed components
  - Content components
  - AI components
- Use Svelte stores for reactive state management
- Follow functional reactive programming patterns
- Implement immutable state transformations

### Backend (Bun + SvelteKit)
- API endpoints must be in `routes/api/`
- Core services must be organized in appropriate directories:
  - Feed Service
  - Nitter Service
  - Web Scraping Service
  - API Client Service
  - Background Job Service
- Server-side logic should be in `lib/server/`

### Data Layer
- Use SQLite with Drizzle ORM
- Implement encrypted storage for API credentials
- Follow immutable data structures pattern
- Use pure data transformations

## AI Architecture
Three main agents with distinct responsibilities:

1. Archivist Agent:
   - Content collection
   - Metadata extraction
   - Content organization
   - Relationship mapping

2. Scribe Agent:
   - Content analysis
   - Summarization
   - Key points extraction
   - Sentiment analysis
   - Content quality assessment

3. Librarian Agent:
   - Content recommendations
   - Cross-references
   - Organization suggestions
   - User interaction learning

## Local-First Principles
- All data must be stored locally
- Ensure complete functionality without internet
- Prioritize user data ownership and control
- Maintain privacy-focused design

## Technology Requirements
- Use TypeScript for type safety
- Implement Zod for validation
- Use ESLint and Prettier for code formatting
- Follow Drizzle ORM patterns for database operations

## Optional Brave Search Integration

### Overview
The app optionally integrates with Brave Search API to enhance AI agent capabilities while maintaining the local-first philosophy:

- üîç Privacy-respecting web search integration
- ü§ñ AI-optimized content enrichment
- üìä Schema-enriched metadata
- üåê Real-time web context
- ‚ö° 2,000 free monthly queries

### Integration Levels

1. **Basic (Free Tier - 2,000 queries/month)**
   - Strategic query allocation across agents
   - Local caching for frequently accessed data
   - Automatic fallback to local-only operation

2. **Premium (Optional paid plans)**
   - Enhanced AI inference capabilities
   - Data storage rights for training
   - Higher query limits
   - Additional features like news and video search

### Smart Query Management
- Query budgeting system
- Cache-first approach
- Intelligent request batching
- Automatic fallback to local processing