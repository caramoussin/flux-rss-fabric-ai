---
description: 
globs: 
alwaysApply: true
---
# Effect Patterns - Cursor Rules

## Core Effect Patterns

### Error Handling
```typescript
// Always extend AppError for service-specific errors
export class CustomError extends AppError {
  readonly _tag = 'CustomError';
}

// Use Effect.try for operations that might fail
const operation = Effect.try({
  try: () => { /* operation */ },
  catch: (error) => new CustomError({
    code: 'ERROR_CODE',
    message: 'Error message',
    cause: error
  })
});
```

### Service Pattern
```typescript
// Service interface
export interface MyService extends BaseService {
  operation(): ServiceEffect<MyService, ServiceError, Result>;
}

// Service tag
export const MyServiceTag = createServiceTag<MyService>('MyService');

// Service implementation
export class MyServiceImpl implements MyService {
  readonly _tag = 'MyService';
  constructor(readonly config: RuntimeConfig) {}
  
  operation(): ServiceEffect<MyService, ServiceError, Result> {
    return Effect.try({
      try: () => { /* implementation */ },
      catch: (error) => createServiceError(
        'ERROR_CODE',
        'Error message',
        error
      )
    });
  }
}

// Service layer
export const MyServiceLive = createServiceLayer(
  MyServiceTag,
  (config) => new MyServiceImpl(config)
);
```

### Store Pattern
```typescript
// Store interface
export interface MyStore extends BaseStore {
  getData(): Effect.Effect<never, StoreError, Data>;
  setData(data: Data): Effect.Effect<never, StoreError, void>;
}

// Store implementation
export class MyStoreImpl extends BaseStoreImpl implements MyStore {
  constructor(config: RuntimeConfig) {
    super('MyStore', config);
  }
  
  getData(): Effect.Effect<never, StoreError, Data> {
    return Effect.flatMap(
      this.get<Data>('key'),
      (data) => data ? Effect.succeed(data) : Effect.fail(
        createStoreError('NOT_FOUND', 'Data not found')
      )
    );
  }
}

// Store layer
export const MyStoreLive = createStoreLayer(
  MyStoreTag,
  MyStoreImpl
);
```

## Effect Composition Rules

### Service Composition
1. Always compose services using Effect layers
2. Use `Effect.provideLayer` for dependency injection
3. Combine layers with `Layer.merge`
4. Handle service dependencies explicitly

```typescript
const program = Effect.gen(function* ($) {
  const service1 = yield* $(Effect.service(Service1Tag));
  const service2 = yield* $(Effect.service(Service2Tag));
  // Use services...
});

const MainLayer = Layer.merge(
  Service1Live,
  Service2Live
);

const result = runWithRuntime(
  Effect.provideLayer(program, MainLayer)
);
```

### Error Handling Rules
1. Use specific error types for different error categories
2. Always include error code, message, and cause
3. Handle errors at the appropriate level
4. Use `Effect.catchAll` for comprehensive error handling

```typescript
const handleError = <E extends AppError, A>(
  effect: Effect.Effect<never, E, A>
): Effect.Effect<never, never, A> =>
  Effect.catchAll(effect, (error) => {
    console.error(`${error._tag}: ${error.message}`);
    return Effect.fail(error);
  });
```

### Cache Management Rules
1. Use TTL for cache entries
2. Implement cache invalidation strategy
3. Handle cache misses gracefully
4. Use type-safe cache operations

```typescript
const withCache = <T>(
  key: string,
  operation: Effect.Effect<never, AppError, T>,
  ttl?: number
): Effect.Effect<never, AppError, T> =>
  Effect.flatMap(
    this.get<T>(key),
    (cached) =>
      cached
        ? Effect.succeed(cached)
        : Effect.flatMap(operation, (result) =>
            Effect.as(this.set(key, result, ttl), result)
          )
  );
```

## Testing Patterns

### Service Testing
```typescript
const TestService = new MyServiceImpl(testConfig);

const testOperation = Effect.runPromise(
  Effect.provideService(
    service.operation(),
    MyServiceTag,
    TestService
  )
);
```

### Store Testing
```typescript
const TestStore = new MyStoreImpl(testConfig);

const testStore = Effect.runPromise(
  Effect.provideService(
    store.getData(),
    MyStoreTag,
    TestStore
  )
);
```

## UI Integration Rules

### Effect Hooks
1. Create Effect-based hooks for UI components
2. Handle loading and error states
3. Use Effect for side effects
4. Manage subscriptions properly

```typescript
const useEffect = <E, A>(
  effect: Effect.Effect<never, E, A>,
  onSuccess: (a: A) => void,
  onError: (e: E) => void
) => {
  useEffect(() => {
    runEffect(effect, onSuccess, onError);
  }, []);
};
```

## File Organization Rules

### Core Effects
- Place core Effect types in `src/lib/core/effects/`
- Keep error definitions in `errors.ts`
- Runtime configuration in `runtime.ts`
- Base service/store patterns in respective files

### Services
- Group related services in directories
- Keep interface and implementation separate
- Export service layer as main entry point
- Include service-specific errors

### Stores
- Group related stores in directories
- Extend BaseStore for consistency
- Implement caching strategy
- Include store-specific errors

## Best Practices

1. **Type Safety**
   - Use explicit type annotations
   - Leverage Effect's type system
   - Define clear interfaces
   - Use tagged types for errors

2. **Error Handling**
   - Use specific error types
   - Include detailed error messages
   - Preserve error stack traces
   - Handle all error cases

3. **Performance**
   - Implement proper caching
   - Use Effect's concurrency features
   - Optimize resource cleanup
   - Monitor Effect operations

4. **Testing**
   - Test Effect compositions
   - Mock services appropriately
   - Test error conditions
   - Verify cache behavior